/*
 * OpenProdoc
 * 
 * See the help doc files distributed with
 * this work for additional information regarding copyright ownership.
 * Joaquin Hierro licenses this file to You under:
 * 
 * License GNU GPL v3 http://www.gnu.org/licenses/gpl.html
 * 
 * you may not use this file except in compliance with the License.  
 * Unless agreed to in writing, software is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * author: Joaquin Hierro      2011
 * 
 */

/*
 * MainWin.java
 *
 * Created on 29-ene-2010, 0:52:22
 */

package prodocswing.forms;

import java.awt.Font;
import java.awt.Image;
import java.io.File;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import prodoc.*;
import prodocswing.PDTableModel;
import prodocswing.TreeTerm;

/**
 *
 * @author jhierrot
 */
public class MainThesaur extends javax.swing.JFrame
{
private static DriverGeneric Session=null;
static private DefaultTreeModel TermTreeModel=null;
static private String ActTermId=null;
static private PDTableModel DocsContained;
private PDThesaur TermAct=null;
//static private String List=PDThesaur.fACL+"/"+PDThesaur.fFOLDTYPE+"/"+PDThesaur.fPARENTID+"/"+PDThesaur.fPDID+"/"+PDThesaur.fTITLE+"/"+PDThesaur.fPDAUTOR+"/"+PDThesaur.fPDDATE;

//--------------------------------------------------------
/**
* @return the Session
*/
public static DriverGeneric getSession()
{
return Session;
}
//--------------------------------------------------------
/**
 * @param pSess Session to be assigned
 */
public static void setSession(DriverGeneric pSess)
{
Session=pSess;
}
//--------------------------------------------------------
/** Creates new form MainWin */
public MainThesaur()
{
initComponents();
TreeTerm.setPreferredSize(null);
DocsTable.setAutoCreateRowSorter(true);
DocsTable.setAutoCreateColumnsFromModel(true);
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TreeTerm = new javax.swing.JTree();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        SelFolderDesc = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DocsTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        ThesaurMenu = new javax.swing.JMenu();
        AddThesaur = new javax.swing.JMenuItem();
        DelThesaur = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        AddTerm = new javax.swing.JMenuItem();
        ModTerm = new javax.swing.JMenuItem();
        DelTerm = new javax.swing.JMenuItem();
        RefreshTerm = new javax.swing.JMenuItem();
        SearchTerm = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        ThesaurHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OpenProdoc Thesaurus");
        setIconImage(getIcon());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setDividerLocation(270);
        jSplitPane1.setDividerSize(4);

        TreeTerm.setFont(getFontTree());
        TreeTerm.setModel(getTreeModel());
        TreeTerm.setAlignmentX(0.3F);
        TreeTerm.setAutoscrolls(true);
        TreeTerm.setComponentPopupMenu(ThesaurMenu.getComponentPopupMenu());
        TreeTerm.setMaximumSize(new java.awt.Dimension(400, 76));
        TreeTerm.setMinimumSize(new java.awt.Dimension(200, 60));
        TreeTerm.setPreferredSize(new java.awt.Dimension(200, 76));
        TreeTerm.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                TreeTermTreeExpanded(evt);
            }
        });
        TreeTerm.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TreeTermValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(TreeTerm);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jSplitPane2.setDividerLocation(260);
        jSplitPane2.setDividerSize(4);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(24, 48));

        SelFolderDesc.setFont(getFontMenu());
        SelFolderDesc.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane2.setViewportView(SelFolderDesc);

        jSplitPane2.setTopComponent(jScrollPane2);

        DocsTable.setFont(getFontList());
        DocsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(DocsTable);

        jSplitPane2.setRightComponent(jScrollPane3);

        jSplitPane1.setRightComponent(jSplitPane2);

        menuBar.setFont(getFontMenu());

        ThesaurMenu.setText(MainWin.DrvTT("Thesaurus"));
        ThesaurMenu.setFont(getFontMenu());

        AddThesaur.setFont(getFontMenu());
        AddThesaur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        AddThesaur.setText(MainWin.DrvTT("Create_Theusurus"));
        AddThesaur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddThesaurActionPerformed(evt);
            }
        });
        ThesaurMenu.add(AddThesaur);

        DelThesaur.setFont(getFontMenu());
        DelThesaur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/del.png"))); // NOI18N
        DelThesaur.setText(MainWin.DrvTT("Delete_Thesaurus"));
        DelThesaur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelThesaurActionPerformed(evt);
            }
        });
        ThesaurMenu.add(DelThesaur);
        ThesaurMenu.add(jSeparator2);

        AddTerm.setFont(getFontMenu());
        AddTerm.setText(MainWin.DrvTT("Add_Term"));
        AddTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTermActionPerformed(evt);
            }
        });
        ThesaurMenu.add(AddTerm);

        ModTerm.setFont(getFontMenu());
        ModTerm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        ModTerm.setText(MainWin.DrvTT("Update_Term"));
        ModTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModTermActionPerformed(evt);
            }
        });
        ThesaurMenu.add(ModTerm);

        DelTerm.setFont(getFontMenu());
        DelTerm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/del.png"))); // NOI18N
        DelTerm.setText(MainWin.DrvTT("Delete_Term"));
        DelTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelTermActionPerformed(evt);
            }
        });
        ThesaurMenu.add(DelTerm);

        RefreshTerm.setFont(getFontMenu());
        RefreshTerm.setText(MainWin.DrvTT("Refresh"));
        RefreshTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTermActionPerformed(evt);
            }
        });
        ThesaurMenu.add(RefreshTerm);

        SearchTerm.setFont(getFontMenu());
        SearchTerm.setText(MainWin.DrvTT("Search_Terms"));
        SearchTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTermActionPerformed(evt);
            }
        });
        ThesaurMenu.add(SearchTerm);
        ThesaurMenu.add(jSeparator6);

        exitMenuItem.setFont(getFontMenu());
        exitMenuItem.setText(MainWin.DrvTT("Close_Window"));
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        ThesaurMenu.add(exitMenuItem);

        menuBar.add(ThesaurMenu);

        helpMenu.setText(MainWin.DrvTT("Help"));
        helpMenu.setFont(getFontMenu());

        ThesaurHelp.setFont(getFontMenu());
        ThesaurHelp.setText(MainWin.DrvTT("Thesaurus_MainWin"));
        ThesaurHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThesaurHelpActionPerformed(evt);
            }
        });
        helpMenu.add(ThesaurHelp);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing

    private void TreeTermTreeExpanded(javax.swing.event.TreeExpansionEvent evt)//GEN-FIRST:event_TreeTermTreeExpanded
    {//GEN-HEADEREND:event_TreeTermTreeExpanded
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
if ( ((TreeTerm) TreeFold.getUserObject()).isExpanded())
    return;
ExpandFold(TreeFold);
    }//GEN-LAST:event_TreeTermTreeExpanded

    private void TreeTermValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_TreeTermValueChanged
    {//GEN-HEADEREND:event_TreeTermValueChanged
try {
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
TermAct= ((TreeTerm) TreeFold.getUserObject()).getFold();
SelFolderDesc.setText(HtmlDesc(TermAct));
ActTermId=TermAct.getPDId();
RefreshDocs();
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_TreeTermValueChanged

    private void AddThesaurActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddThesaurActionPerformed
    {//GEN-HEADEREND:event_AddThesaurActionPerformed
String NewFoldChild=DialogReadString(MainWin.DrvTT("Add_Folder"),MainWin.DrvTT("Folder_name"), MainWin.DrvTT("Write_Folder_name"), null);
if (NewFoldChild==null || NewFoldChild.length()==0)
    return;
try {
PDThesaur Fold=new PDThesaur(Session);
Fold.setPDId(ActTermId);
//Fold.CreateChild(NewFoldChild);
TreePath ActualPath = TreeTerm.getSelectionPath();
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) ActualPath.getLastPathComponent();
ExpandFold(TreeFold);
TreeTerm.setSelectionPath(ActualPath);
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_AddThesaurActionPerformed

    private void DelThesaurActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DelThesaurActionPerformed
    {//GEN-HEADEREND:event_DelThesaurActionPerformed
try {
TreePath selectionPath = TreeTerm.getSelectionPath();
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
PDThesaur Term= ((TreeTerm) TreeFold.getUserObject()).getFold();
DialogEditFold DEF = new DialogEditFold(this, true);
DEF.setLocationRelativeTo(null);
DEF.DelMode();
Term.Load(ActTermId);
DEF.setRecord(Term.getRecord());
DEF.setVisible(true);
if (DEF.isCancel())
    return;
ActTermId=Term.getParentId();
Term.delete();
TreePath ParentFold = (TreePath) TreeTerm.getSelectionPath().getParentPath();
ExpandFold((DefaultMutableTreeNode)ParentFold.getLastPathComponent());
TreeTerm.setSelectionPath(selectionPath.getParentPath());
TreeFold = (DefaultMutableTreeNode) selectionPath.getParentPath().getLastPathComponent();
TermAct= ((TreeTerm) TreeFold.getUserObject()).getFold();
SelFolderDesc.setText(HtmlDesc(TermAct));
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_DelThesaurActionPerformed

    private void AddTermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddTermActionPerformed
    {//GEN-HEADEREND:event_AddTermActionPerformed
try {
DialogEditFold DEF = new DialogEditFold(this, true);
DEF.setLocationRelativeTo(null);
DEF.AddMode();
DEF.setVisible(true);
if (DEF.isCancel())
    return;
PDThesaur Fold=new PDThesaur(Session);
Fold.assignValues(DEF.getRecord());
Fold.setParentId(ActTermId);
Fold.insert();
TreePath ActualPath = TreeTerm.getSelectionPath();
ExpandFold((DefaultMutableTreeNode)ActualPath.getLastPathComponent());
TreeTerm.setSelectionPath(ActualPath);
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_AddTermActionPerformed

    private void ModTermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ModTermActionPerformed
    {//GEN-HEADEREND:event_ModTermActionPerformed
try {
TreePath selectionPath = TreeTerm.getSelectionPath();
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
PDThesaur Fold= ((TreeTerm) TreeFold.getUserObject()).getFold();
DialogEditFold DEF = new DialogEditFold(this, true);
DEF.setLocationRelativeTo(null);
DEF.EditMode();
Fold.Load(Fold.getPDId());
DEF.setRecord(Fold.getRecord());
DEF.setVisible(true);
if (DEF.isCancel())
    return;
Fold.assignValues(DEF.getRecord());
Fold.update();
TreePath ParentFold = (TreePath) TreeTerm.getSelectionPath().getParentPath();
ExpandFold((DefaultMutableTreeNode)ParentFold.getLastPathComponent());
TreeTerm.setSelectionPath(selectionPath);
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_ModTermActionPerformed

    private void RefreshTermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RefreshTermActionPerformed
    {//GEN-HEADEREND:event_RefreshTermActionPerformed
DefaultMutableTreeNode TreeFold = (DefaultMutableTreeNode) TreeTerm.getSelectionPath().getLastPathComponent();
ExpandFold(TreeFold);
    }//GEN-LAST:event_RefreshTermActionPerformed

    private void SearchTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTermActionPerformed
SearchFold SF = new SearchFold(this, true);
SF.setLocationRelativeTo(null);
SF.setFoldAct(ActTermId);
SF.setVisible(true);     
    }//GEN-LAST:event_SearchTermActionPerformed

    private void ThesaurHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ThesaurHelpActionPerformed
    {//GEN-HEADEREND:event_ThesaurHelpActionPerformed
MainWin.Execute("doc"+MainWin.OSSep()+MainWin.getLang()+MainWin.OSSep()+"ThesaurWin.html");   
    }//GEN-LAST:event_ThesaurHelpActionPerformed

private void DelTermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DelTermActionPerformed
{//GEN-HEADEREND:event_DelTermActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_DelTermActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddTerm;
    private javax.swing.JMenuItem AddThesaur;
    private javax.swing.JMenuItem DelTerm;
    private javax.swing.JMenuItem DelThesaur;
    private javax.swing.JTable DocsTable;
    private javax.swing.JMenuItem ModTerm;
    private javax.swing.JMenuItem RefreshTerm;
    private javax.swing.JMenuItem SearchTerm;
    private javax.swing.JLabel SelFolderDesc;
    private javax.swing.JMenuItem ThesaurHelp;
    private javax.swing.JMenu ThesaurMenu;
    private javax.swing.JTree TreeTerm;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

//---------------------------------------------------------------------
/**
 * 
 * @return
 */
static public Font getFontMenu()
{
return (MainWin.getFontMenu());
}
//---------------------------------------------------------------------
/**
 * 
 * @return
 */
static public Font getFontTree()
{
return (MainWin.getFontTree());
}
//---------------------------------------------------------------------
/**
 * 
 * @return
 */
static public Font getFontList()
{
return (MainWin.getFontList());
}
//---------------------------------------------------------------------
/**
 * 
 * @return
 */
static public Font getFontDialog()
{
return (MainWin.getFontDialog());
}
//---------------------------------------------------------------------
private PDTableModel getTableModel()
{
return new PDTableModel();
}
//---------------------------------------------------------------------
/**
 * 
 * @param pMessage to show to the user
 * @return if the user selects OK
 */
static public boolean MessageQuestion(String pMessage)
{
DialogInfoQuestion DI=new DialogInfoQuestion(null, true);
DI.SetMessage(MainWin.DrvTT(pMessage));
DI.setLocationRelativeTo(null);
DI.setVisible( true);
return (DI.getReturnStatus()==DialogInfoQuestion.RET_OK);
}
//---------------------------------------------------------------------
/**
 * 
 * @param RecomFileName
 * @param Ext
 * @param Save
 * @return
 */
static public String SelectDestination(String RecomFileName, String Ext, boolean Save)
{
JFileChooser fc = new JFileChooser();
//fc.setDialogTitle("Seleccionar Archivo");
if (Ext!=null)
    fc.setFileFilter(new FileNameExtensionFilter("file "+Ext, Ext));
if (RecomFileName!=null)
    fc.setSelectedFile(new File(RecomFileName));
if (!Save)
    {
    if (fc.showOpenDialog(null)!=JFileChooser.APPROVE_OPTION)
        return("");
    }
else
    {
    if (fc.showSaveDialog(null)!=JFileChooser.APPROVE_OPTION)
        return("");
    }
return(fc.getSelectedFile().getAbsolutePath());
}
//---------------------------------------------------------------------
/**
 * 
 * @param RecomFileName
 * @return
 */
static public String SelectFolderDestination(String RecomFileName)
{
JFileChooser fc = new JFileChooser();
if (RecomFileName!=null)
    fc.setSelectedFile(new File(RecomFileName));
fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
if (fc.showSaveDialog(null)!=JFileChooser.APPROVE_OPTION)
    return("");
return(fc.getSelectedFile().getAbsolutePath());
}
//---------------------------------------------------------------------

private TreeModel getTreeModel()
{
if (TermTreeModel==null)
    {
    PDThesaur RootFolder=null;
    try {
    RootFolder = new PDThesaur(Session);
//    RootFolder.Load(PDThesaur.ROOTFOLDER);
    TreeTerm TF=new TreeTerm(RootFolder);
    DefaultMutableTreeNode RootTreeFolder = new DefaultMutableTreeNode(TF);
    TermTreeModel=new DefaultTreeModel(RootTreeFolder);
    ExpandFold(RootTreeFolder);
    } catch (PDException ex)
        {
        MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
        return(null);
        }
    }
return(TermTreeModel);
}
//---------------------------------------------------------------------
private void ExpandFold(DefaultMutableTreeNode ChildTreeFolder)
{
try {
ChildTreeFolder.removeAllChildren();
PDThesaur Fold= ((TreeTerm) ChildTreeFolder.getUserObject()).getFold();
HashSet Child =Fold.getListDirectDescendList(Fold.getPDId());
for (Iterator it = Child.iterator(); it.hasNext();)
    {
    String ChildId=(String)it.next();
    if (ChildId.compareTo(Fold.getPDId())==0)
        continue;
    PDThesaur ChildFolder=new PDThesaur(Session);
    ChildFolder.Load(ChildId);
    TreeTerm TFc=new TreeTerm(ChildFolder);
    DefaultMutableTreeNode ChildTreeFolder2=new DefaultMutableTreeNode(TFc);
    DefaultMutableTreeNode ChildTreeFolder3=new DefaultMutableTreeNode(null);
    ChildTreeFolder2.add(ChildTreeFolder3);
    ChildTreeFolder.add(ChildTreeFolder2);
    }
(((TreeTerm) ChildTreeFolder.getUserObject())).setExpanded(true);
TermTreeModel.reload(ChildTreeFolder);
TreeTerm.setPreferredSize(null);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}
//---------------------------------------------------------------------
static private String FormatDate(Date d)
{
return(MainWin.getFormatterTS().format(d));
}
//---------------------------------------------------------------------
/**
 * 
 * @param Title
 * @param FieldName
 * @param ToolTip
 * @param FieldText
 * @return
 */
static public String DialogReadString(String Title, String FieldName, String ToolTip, String FieldText)
{
DialogReadString dialog = new DialogReadString(new javax.swing.JFrame(), true);
dialog.setLocationRelativeTo(null);
dialog.SetVals(Title, FieldName, ToolTip, FieldText);
dialog.setVisible(true);
if (dialog.getReturnStatus() == DialogReadString.RET_CANCEL)
    return null;
else
    return(dialog.getField());
}
//---------------------------------------------------------------------
static private Image getIcon()
{
ImageIcon PDIcon=new ImageIcon("resources/LogoProdoc.jpg");
return PDIcon.getImage();
}
//---------------------------------------------------------------------
/**
 * Refresh the list of documents
 * called after changing folder or adding, modifying or deleting a document
 */
private void RefreshDocs()
{
try {
    DocsContained = new PDTableModel();
    DocsContained.setDrv(MainThesaur.getSession());
    TermAct.getListDirectDescendList(ActTermId);
    PDDocs Doc = new PDDocs(getSession());
    DocsContained.setListFields(Doc.getRecordStruct());
    DocsContained.setCursor(Doc.getListContainedDocs(TermAct.getPDId()));
    DocsTable.setModel(DocsContained);
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(13));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(12));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(11));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(10));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(9));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(8));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(7));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(6));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(5));
    DocsTable.getColumnModel().removeColumn(DocsTable.getColumnModel().getColumn(0));
//   0 4 5 7 8 9 10 11 12
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}
//---------------------------------------------------------------------
private String HtmlDesc(PDThesaur TermAct) throws PDException
{
StringBuilder Html=new StringBuilder("<html><b>"+TermAct.getDescription()+"</b> : "+FormatDate(TermAct.getPDDate())+ "<hr>");
Html.append("</html>");
return(Html.toString());
}
//---------------------------------------------------------------------
}
