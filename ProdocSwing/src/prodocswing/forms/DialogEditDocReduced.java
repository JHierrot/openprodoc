/*
 * OpenProdoc
 * 
 * See the help doc files distributed with
 * this work for additional information regarding copyright ownership.
 * Joaquin Hierro licenses this file to You under:
 * 
 * License GNU GPL v3 http://www.gnu.org/licenses/gpl.html
 * 
 * you may not use this file except in compliance with the License.  
 * Unless agreed to in writing, software is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * author: Joaquin Hierro      2011
 * 
 */

/*
 * DialogEditFold.java
 *
 * Created on 28-mar-2010, 20:14:35
 */

package prodocswing.forms;

import java.io.File;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import prodoc.Attribute;
import prodoc.Cursor;
import prodoc.DriverGeneric;
import prodoc.ObjPD;
import prodoc.PDDocs;
import prodoc.PDException;
//import prodoc.PDFolders;
import prodoc.PDLog;
import prodoc.PDMimeType;
import prodoc.PDObjDefs;
import prodoc.Record;

/**
 *
 * @author jhierrot
 */
public class DialogEditDocReduced extends javax.swing.JDialog
{

private Record EditedDoc;
private boolean Cancel;
private boolean Modif=false;
private boolean SetRecordDocChanged=false;
private Vector InputFields=new Vector();
private HashSet AttrExcluded=new HashSet();
/**
 * 
 */
public File SelFile=null;

/** Creates new form DialogEditFold
 * @param parent
 * @param modal 
 */
public DialogEditDocReduced(java.awt.Frame parent, boolean modal)
{
super(parent, modal);
initComponents();
}

/** This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelOperation = new javax.swing.JLabel();
        TitleLabel = new javax.swing.JLabel();
        TitleTextField = new javax.swing.JTextField();
        DateLabel = new javax.swing.JLabel();
        DateTextField = new javax.swing.JFormattedTextField();
        NameLabel = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        FilePathLabel = new javax.swing.JLabel();
        FilePathTextField = new javax.swing.JTextField();
        ButtonSelFile = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        ButtonAcept = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(MainWin.TT("Maintenance_Documents"));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        LabelOperation.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        LabelOperation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelOperation.setText("jLabel1");

        TitleLabel.setFont(MainWin.getFontDialog());
        TitleLabel.setText(MainWin.TT("Document_Title"));

        TitleTextField.setFont(MainWin.getFontDialog());

        DateLabel.setFont(MainWin.getFontDialog());
        DateLabel.setText(MainWin.TT("Document_Date"));

        DateTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        DateTextField.setFont(MainWin.getFontDialog());

        NameLabel.setFont(MainWin.getFontDialog());
        NameLabel.setText(MainWin.TT("Name"));

        NameTextField.setEditable(false);
        NameTextField.setFont(MainWin.getFontDialog());
        NameTextField.setEnabled(false);

        FilePathLabel.setFont(MainWin.getFontDialog());
        FilePathLabel.setText(MainWin.TT("File_name"));

        FilePathTextField.setFont(MainWin.getFontDialog());

        ButtonSelFile.setFont(MainWin.getFontDialog());
        ButtonSelFile.setText("Sel");
        ButtonSelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSelFileActionPerformed(evt);
            }
        });

        ButtonCancel.setFont(MainWin.getFontDialog());
        ButtonCancel.setText(MainWin.TT("Cancel"));
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        ButtonAcept.setFont(MainWin.getFontDialog());
        ButtonAcept.setText(MainWin.TT("Ok"));
        ButtonAcept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAceptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(LabelOperation, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(DateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(FilePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(TitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(FilePathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ButtonSelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                            .addComponent(TitleTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ButtonAcept)
                                .addGap(18, 18, 18)
                                .addComponent(ButtonCancel)))
                        .addGap(20, 20, 20))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DateLabel, FilePathLabel, NameLabel, TitleLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelOperation)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TitleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateLabel)
                    .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FilePathLabel)
                    .addComponent(ButtonSelFile))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonAcept)
                    .addComponent(ButtonCancel))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonCancelActionPerformed
    {//GEN-HEADEREND:event_ButtonCancelActionPerformed
Cancel=true;
this.dispose();
}//GEN-LAST:event_ButtonCancelActionPerformed

    private void ButtonAceptActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonAceptActionPerformed
    {//GEN-HEADEREND:event_ButtonAceptActionPerformed
try {
Attribute Attr = EditedDoc.getAttr(PDDocs.fTITLE);
Attr.setValue(TitleTextField.getText());
Attr = EditedDoc.getAttr(PDDocs.fNAME);
Attr.setValue(NameTextField.getText());
Attr = EditedDoc.getAttr(PDDocs.fDOCDATE);
Attr.setValue(DateTextField.getValue());
Attr = EditedDoc.getAttr(PDDocs.fMIMETYPE);
PDMimeType mt=new PDMimeType(MainWin.getSession());
Attr.setValue(mt.SolveName(NameTextField.getText()));
Cancel = false;
this.dispose();
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}//GEN-LAST:event_ButtonAceptActionPerformed

    private void ButtonSelFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonSelFileActionPerformed
    {//GEN-HEADEREND:event_ButtonSelFileActionPerformed
JFileChooser fc = new JFileChooser();
fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
int returnVal = fc.showOpenDialog(this);
if (returnVal == JFileChooser.APPROVE_OPTION)
    {
    SelFile = fc.getSelectedFile();
    FilePathTextField.setText(SelFile.getAbsolutePath());
    NameTextField.setText(SelFile.getName());
    }
    }//GEN-LAST:event_ButtonSelFileActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
Cancel=true;
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAcept;
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonSelFile;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JFormattedTextField DateTextField;
    private javax.swing.JLabel FilePathLabel;
    private javax.swing.JTextField FilePathTextField;
    private javax.swing.JLabel LabelOperation;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JTextField TitleTextField;
    // End of variables declaration//GEN-END:variables

//----------------------------------------------------------------
/**
 * Obtains a list of ACL
 * @return a DefaultComboModel with names of ACL
 */
private DefaultComboBoxModel getComboModel()
{
return(ListObjects.getComboModel("ACL"));
}
//----------------------------------------------------------------
/**
 * Obtains a list of clases of type folder allowed to the user
 * @return a DefaultComboModel with names of classes of folder
 */
private DefaultComboBoxModel getComboModelFold()
{
Vector VObjects=new Vector();
try {
DriverGeneric Session=MainWin.getSession();
PDObjDefs Obj = new PDObjDefs(Session);
Cursor CursorId = Obj.getListDocs();
Record Res=Session.NextRec(CursorId);
while (Res!=null)
    {
    Attribute Attr=Res.getAttr(PDObjDefs.fNAME);
    VObjects.add(Attr.getValue());
    Res=Session.NextRec(CursorId);
    }
Session.CloseCursor(CursorId);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
return(new DefaultComboBoxModel(VObjects));
}
//----------------------------------------------------------------
private ComboBoxModel getComboMimeFold()
{
Vector VObjects=new Vector();
try {
DriverGeneric Session=MainWin.getSession();
PDMimeType Obj = new PDMimeType(Session);
Cursor CursorId = Obj.getAll();
Record Res=Session.NextRec(CursorId);
while (Res!=null)
    {
    Attribute Attr=Res.getAttr(PDObjDefs.fNAME);
    VObjects.add(Attr.getValue());
    Res=Session.NextRec(CursorId);
    }
Session.CloseCursor(CursorId);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
return(new DefaultComboBoxModel(VObjects));
}
//----------------------------------------------------------------

/**
 * sets the Form in mode Add
 * Disabling fields and changint literals
 */
public void AddMode()
{
LabelOperation.setText(MainWin.TT("Add_Document"));
}
//----------------------------------------------------------------
/**
 * sets the Form in mode Edition
 * Disabling fields and changing literals
 */
public void EditMode()
{
LabelOperation.setText(MainWin.TT("Update_Document"));
Modif=true;
}
//----------------------------------------------------------------
/**
 * sets the Form in mode Delete
 * Disabling fields and changing literals
 */
public void DelMode()
{
LabelOperation.setText(MainWin.TT("Delete_Document"));
TitleTextField.setEnabled(false);
DateTextField.setEnabled(false);
//MimeTypeCB.setEnabled(false);
ButtonSelFile.setEnabled(false);
FilePathTextField.setEnabled(false);
}
//----------------------------------------------------------------
/**
* @return the Folder edited
*/
public Record getRecord()
{
return EditedDoc;
}
//----------------------------------------------------------------
/**
* @param pFolder the User to set
*/
public void setRecord(Record pFolder)
{
EditedDoc = pFolder;
AttrExcluded.clear();
Attribute Attr;
SetRecordDocChanged=true;
Attr=EditedDoc.getAttr(PDDocs.fTITLE); //-----------------------------
AttrExcluded.add(PDDocs.fTITLE);
//TitleLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue()!=null)
    TitleTextField.setText((String)Attr.getValue());
TitleTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=EditedDoc.getAttr(PDDocs.fNAME); //-----------------------------
AttrExcluded.add(PDDocs.fNAME);
//NameLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue()!=null)
    NameTextField.setText((String)Attr.getValue());
NameTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
NameTextField.setEnabled(false);
Attr=EditedDoc.getAttr(PDDocs.fDOCDATE); //-----------------------------
AttrExcluded.add(PDDocs.fDOCDATE);
//DateLabel.setText(MainWin.DrvTT(Attr.getUserName()));
try {
DateTextField.setFormatterFactory(MainWin.getFormFacDate());
} catch(Exception e)
    {
    PDLog.Error(e.getLocalizedMessage());
    }
if (Attr.getValue()!=null)
    DateTextField.setValue(Attr.getValue());
DateTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription())  +"("+MainWin.getFormatDate()+")");
Attr=EditedDoc.getAttr(PDDocs.fMIMETYPE); //-----------------------------
AttrExcluded.add(PDDocs.fMIMETYPE);
//MimeLabel.setText(MainWin.DrvTT(Attr.getUserName()));
//if (Attr.getValue()!=null)
//    MimeTypeCB.setSelectedItem((String)Attr.getValue());
//MimeTypeCB.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
SetRecordDocChanged=false;
if (!Modif)
    {
    AttrExcluded.add(ObjPD.fPDDATE);
    AttrExcluded.add(ObjPD.fPDAUTOR);
    }
AttrExcluded.add(PDDocs.fPARENTID);
AttrExcluded.add(PDDocs.fLOCKEDBY);
AttrExcluded.add(PDDocs.fREPOSIT);
AttrExcluded.add(PDDocs.fPURGEDATE);
AttrExcluded.add(PDDocs.fVERSION);
AttrExcluded.add(PDDocs.fSTATUS);
}
//----------------------------------------------------------------
/**
* @return the Cancel
*/
public boolean isCancel()
{
return Cancel;
}
//----------------------------------------------------------------
}
