/*
 * OpenProdoc
 * 
 * See the help doc files distributed with
 * this work for additional information regarding copyright ownership.
 * Joaquin Hierro licenses this file to You under:
 * 
 * License GNU GPL v3 http://www.gnu.org/licenses/gpl.html
 * 
 * you may not use this file except in compliance with the License.  
 * Unless agreed to in writing, software is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * author: Joaquin Hierro      2011
 * 
 */

/*
 * ListObjects.java
 *
 * Created on 12-feb-2010, 20:39:16
 */

package prodocswing.forms;

import java.awt.Frame;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import prodoc.*;
import prodocswing.PDTableModel;

/**
 *
 * @author jhierrot
 */
public final class ListDeleted extends javax.swing.JDialog
{
PDTableModel DeletedDocsList = new PDTableModel();
Frame Fparent;
/**
 * 
 */
protected JDialog MantForm;
String TypeDocRestore="";

/** Creates new form ListObjects
 * @param parent 
 * @param modal
 */
public ListDeleted(java.awt.Frame parent, boolean modal)
{
super(parent, modal);
Fparent=parent;
initComponents();
ObjectsTable.setAutoCreateRowSorter(true);
ObjectsTable.setAutoCreateColumnsFromModel(true);
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ObjectsTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        UndeleteButton = new javax.swing.JButton();
        PurgeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        FoldTypeCB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(MainWin.TT("Trash_bin"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ObjectsTable.setAutoCreateRowSorter(true);
        ObjectsTable.setFont(MainWin.getFontList());
        jScrollPane1.setViewportView(ObjectsTable);

        jToolBar1.setRollover(true);

        UndeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/undel.png"))); // NOI18N
        UndeleteButton.setToolTipText(MainWin.TT("Undelete_deleted_documents"));
        UndeleteButton.setFocusable(false);
        UndeleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        UndeleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        UndeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndeleteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(UndeleteButton);

        PurgeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/del.png"))); // NOI18N
        PurgeButton.setToolTipText(MainWin.TT("Permanently_removes_the_selected_documents"));
        PurgeButton.setFocusable(false);
        PurgeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PurgeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PurgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurgeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(PurgeButton);

        jLabel1.setFont(MainWin.getFontDialog());
        jLabel1.setText(MainWin.TT("Documental_type_to_undelete"));

        FoldTypeCB.setFont(MainWin.getFontDialog());
        FoldTypeCB.setModel(getComboModelFold());
        FoldTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FoldTypeCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FoldTypeCB, 0, 380, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FoldTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void UndeleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_UndeleteButtonActionPerformed
{//GEN-HEADEREND:event_UndeleteButtonActionPerformed
if (getObjectsTable().getSelectedRow()==-1)
    return;
try {
int List[]=getObjectsTable().getSelectedRows();
for (int i = 0; i < List.length; i++) 
    {
    int ToUnDel = List[i];
    Record r = DeletedDocsList.getElement(ToUnDel);
    String Id = (String) r.getAttr(PDDocs.fPDID).getValue();
    PDDocs Doc = new PDDocs(MainWin.getSession());
    Doc.UnDelete(TypeDocRestore, Id);
    }
RefreshTable();
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}//GEN-LAST:event_UndeleteButtonActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
{//GEN-HEADEREND:event_formWindowClosing
}//GEN-LAST:event_formWindowClosing

private void FoldTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FoldTypeCBActionPerformed
TypeDocRestore = (String) FoldTypeCB.getSelectedItem();
RefreshTable();
}//GEN-LAST:event_FoldTypeCBActionPerformed

private void PurgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurgeButtonActionPerformed
if (getObjectsTable().getSelectedRow()==-1)
    return;
try {
int List[]=getObjectsTable().getSelectedRows();
for (int i = 0; i < List.length; i++) 
    {
    int ToDel = List[i];
    Record r = DeletedDocsList.getElement(ToDel);
    String Id = (String) r.getAttr(PDDocs.fPDID).getValue();
    PDDocs Doc = new PDDocs(MainWin.getSession());
    Doc.Purge(TypeDocRestore, Id);
    }
RefreshTable();
} catch (Exception ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}//GEN-LAST:event_PurgeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox FoldTypeCB;
    private javax.swing.JTable ObjectsTable;
    private javax.swing.JButton PurgeButton;
    private javax.swing.JButton UndeleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

//----------------------------------------------------------------
    /**
     * 
     * @param ListName
     * @return
     */
    static public DefaultComboBoxModel getComboModel(String ListName)
{
Vector VObjects=new Vector();
try {
DriverGeneric Session=MainWin.getSession();
PDDocs DocVer = new PDDocs(Session);
Cursor CursorId = DocVer.ListVersions(ListName, ListName);
Record Res=Session.NextRec(CursorId);
while (Res!=null)
    {
    Attribute Attr=Res.getAttr(PDRoles.fNAME);
    VObjects.add(Attr.getValue());
    Res=Session.NextRec(CursorId);
    }
Session.CloseCursor(CursorId);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
return(new DefaultComboBoxModel(VObjects));
}
//----------------------------------------------------------------
    /**
     * 
     * @return
     */
    protected PDTableModel getPDTableModel()
{
return ((PDTableModel) getObjectsTable().getModel());
}
//----------------------------------------------------------------
/**
 * 
 * @return
 */
protected int getSelectedRow()
{
return (getObjectsTable().convertRowIndexToModel(getObjectsTable().getSelectedRow()));
}
//----------------------------------------------------------------
/**
 * 
 * @return
 */
//--------------------------------------------------------------------
protected JButton getEditButton()
{
return UndeleteButton;
}
//--------------------------------------------------------------------
/**
* @return the ObjectsTable
*/
protected javax.swing.JTable getObjectsTable()
{
return ObjectsTable;
}
//--------------------------------------------------------------------
/**
 * 
 */
protected void RefreshTable()
{
try {
DeletedDocsList = new PDTableModel();
DeletedDocsList.setDrv(MainWin.getSession());
PDDocs DocVer = new PDDocs(MainWin.getSession(), TypeDocRestore);
Cursor CursorId = DocVer.ListDeleted(TypeDocRestore);
Record Rec=DocVer.getRecSum().CopyMono();
DeletedDocsList.setListFields(Rec);
DeletedDocsList.setCursor(CursorId);
getObjectsTable().setModel(DeletedDocsList);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.TT("Error_assigning_columns_to_table")+":"+MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}
//--------------------------------------------------------------------
/**
 * Obtains a list of clases of type folder allowed to the user
 * @return a DefaultComboModel with names of classes of folder
 */
private DefaultComboBoxModel getComboModelFold()
{
Vector VObjects=new Vector();
try {
DriverGeneric Session=MainWin.getSession();
PDObjDefs Obj = new PDObjDefs(Session);
Cursor CursorId = Obj.getListDocs();
Record Res=Session.NextRec(CursorId);
while (Res!=null)
    {
    Attribute Attr=Res.getAttr(PDObjDefs.fNAME);
    VObjects.add(Attr.getValue());
    Res=Session.NextRec(CursorId);
    }
Session.CloseCursor(CursorId);
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
return(new DefaultComboBoxModel(VObjects));
}
//----------------------------------------------------------------
}
