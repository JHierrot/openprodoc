/*
 * OpenProdoc
 * 
 * See the help doc files distributed with
 * this work for additional information regarding copyright ownership.
 * Joaquin Hierro licenses this file to You under:
 * 
 * License GNU GPL v3 http://www.gnu.org/licenses/gpl.html
 * 
 * you may not use this file except in compliance with the License.  
 * Unless agreed to in writing, software is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * author: Joaquin Hierro      2011
 * 
 */

/*
 * MantUsers.java
 *
 * Created on 17-feb-2010, 21:16:33
 */

package prodocswing.forms;

import java.awt.Frame;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import prodoc.*;
import prodocswing.PDTableModel;

/**
 *
 * @author jhierrot
 */
public class MantObjDefs extends javax.swing.JDialog
{
private Record ObjDef;
private boolean Cancel;
private PDObjDefs EditObjDef;
Frame Fparent;
private PDTableModel AttrMembers;
private PDTableModel InheritAttrMembers;
private Vector ListRes=null;

/** Creates new form MantUsers
 * @param parent
 * @param modal  
 */
public MantObjDefs(java.awt.Frame parent, boolean modal)
{
super(parent, modal);
Fparent=parent;
initComponents();
EditObjDef = new PDObjDefs(MainWin.getSession());
AttrTable.setAutoCreateRowSorter(true);
AttrTable.setAutoCreateColumnsFromModel(true);
InheritAttrTable.setAutoCreateRowSorter(true);
InheritAttrTable.setAutoCreateColumnsFromModel(true);
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelOperation = new javax.swing.JLabel();
        TypeNameLabel = new javax.swing.JLabel();
        TypeNameTextField = new javax.swing.JTextField();
        TypeDescripLabel = new javax.swing.JLabel();
        TypeDescripTextField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PanelType = new javax.swing.JPanel();
        ClasTypeDescripLabel = new javax.swing.JLabel();
        ACLComboBox = new javax.swing.JComboBox();
        ClassTypeComboBox = new javax.swing.JComboBox();
        ACLDescripLabel = new javax.swing.JLabel();
        ParentNameLabel = new javax.swing.JLabel();
        ParentNameTextField = new javax.swing.JTextField();
        RepositDescripLabel = new javax.swing.JLabel();
        RepositComboBox = new javax.swing.JComboBox();
        ActiveCheckBox = new javax.swing.JCheckBox();
        ActiveLabel = new javax.swing.JLabel();
        TraceAddLabel = new javax.swing.JLabel();
        TraceAddCheckBox = new javax.swing.JCheckBox();
        TraceDelLabel = new javax.swing.JLabel();
        TraceDelCheckBox = new javax.swing.JCheckBox();
        TraceModLabel = new javax.swing.JLabel();
        TraceModCheckBox = new javax.swing.JCheckBox();
        TraceViewLabel = new javax.swing.JLabel();
        TraceViewCheckBox = new javax.swing.JCheckBox();
        PanelAttr = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AttrTable = new javax.swing.JTable();
        ToolBarAttr = new javax.swing.JToolBar();
        AddButtonAttr = new javax.swing.JButton();
        DelButtonAttr = new javax.swing.JButton();
        EditButtonAttr = new javax.swing.JButton();
        PanelInheritAttr = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InheritAttrTable = new javax.swing.JTable();
        ToolBarInheAttr = new javax.swing.JToolBar();
        ButtonAcept = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        ButtonCreateObject = new javax.swing.JButton();
        ButtonDestroyObject = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(MainWin.TT("Object_definitions_Maintenance"));
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        LabelOperation.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        LabelOperation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelOperation.setText("jLabel1");

        TypeNameLabel.setFont(MainWin.getFontDialog());
        TypeNameLabel.setText("Nombre");

        TypeNameTextField.setFont(MainWin.getFontDialog());
        TypeNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TypeNameTextFieldKeyReleased(evt);
            }
        });

        TypeDescripLabel.setFont(MainWin.getFontDialog());
        TypeDescripLabel.setText("Descripci√≥n");

        TypeDescripTextField.setFont(MainWin.getFontDialog());

        ClasTypeDescripLabel.setFont(MainWin.getFontDialog());
        ClasTypeDescripLabel.setText("CT");

        ACLComboBox.setFont(MainWin.getFontDialog());
        ACLComboBox.setModel(getComboModel("ACL"));

        ClassTypeComboBox.setFont(MainWin.getFontDialog());
        ClassTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DOCUMENT", "FOLDER" }));
        ClassTypeComboBox.setEnabled(false);

        ACLDescripLabel.setFont(MainWin.getFontDialog());
        ACLDescripLabel.setText("ACL");

        ParentNameLabel.setFont(MainWin.getFontDialog());
        ParentNameLabel.setText("Clase Padre");

        ParentNameTextField.setFont(MainWin.getFontDialog());

        RepositDescripLabel.setFont(MainWin.getFontDialog());
        RepositDescripLabel.setText("Repositorio");

        RepositComboBox.setFont(MainWin.getFontDialog());
        RepositComboBox.setModel(getComboModel("Reposit"));

        ActiveCheckBox.setFont(MainWin.getFontDialog());
        ActiveCheckBox.setSelected(true);

        ActiveLabel.setFont(MainWin.getFontDialog());
        ActiveLabel.setText("Activo");

        TraceAddLabel.setFont(MainWin.getFontDialog());
        TraceAddLabel.setText("TraceAdd");

        TraceAddCheckBox.setFont(MainWin.getFontDialog());

        TraceDelLabel.setFont(MainWin.getFontDialog());
        TraceDelLabel.setText("TraceDel");

        TraceDelCheckBox.setFont(MainWin.getFontDialog());

        TraceModLabel.setFont(MainWin.getFontDialog());
        TraceModLabel.setText("TraceMod");

        TraceModCheckBox.setFont(MainWin.getFontDialog());

        TraceViewLabel.setFont(MainWin.getFontDialog());
        TraceViewLabel.setText("TraceView");

        TraceViewCheckBox.setFont(MainWin.getFontDialog());

        javax.swing.GroupLayout PanelTypeLayout = new javax.swing.GroupLayout(PanelType);
        PanelType.setLayout(PanelTypeLayout);
        PanelTypeLayout.setHorizontalGroup(
            PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(ParentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ACLDescripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RepositDescripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ClasTypeDescripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraceAddLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraceDelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraceModLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraceViewLabel)
                    .addComponent(ActiveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(TraceAddCheckBox)
                        .addComponent(TraceDelCheckBox)
                        .addComponent(TraceViewCheckBox)
                        .addComponent(TraceModCheckBox)
                        .addComponent(ActiveCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(RepositComboBox, 0, 361, Short.MAX_VALUE)
                    .addComponent(ParentNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(ClassTypeComboBox, 0, 361, Short.MAX_VALUE)
                    .addComponent(ACLComboBox, 0, 361, Short.MAX_VALUE))
                .addContainerGap())
        );

        PanelTypeLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ACLDescripLabel, ParentNameLabel, RepositDescripLabel});

        PanelTypeLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ActiveLabel, TraceAddLabel, TraceDelLabel, TraceModLabel, TraceViewLabel});

        PanelTypeLayout.setVerticalGroup(
            PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTypeLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelTypeLayout.createSequentialGroup()
                        .addComponent(ACLComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClassTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClasTypeDescripLabel)))
                    .addGroup(PanelTypeLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(ACLDescripLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ParentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ParentNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RepositComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RepositDescripLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelTypeLayout.createSequentialGroup()
                        .addComponent(ActiveCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TraceAddCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TraceDelCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TraceModCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TraceViewCheckBox))
                    .addGroup(PanelTypeLayout.createSequentialGroup()
                        .addComponent(ActiveLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TraceAddLabel)
                        .addGap(11, 11, 11)
                        .addComponent(TraceDelLabel)
                        .addGap(11, 11, 11)
                        .addComponent(TraceModLabel)
                        .addGap(11, 11, 11)
                        .addComponent(TraceViewLabel)))
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab(MainWin.TT(("Object_Definition")), PanelType);

        AttrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(AttrTable);

        ToolBarAttr.setRollover(true);

        AddButtonAttr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        AddButtonAttr.setToolTipText("");
        AddButtonAttr.setFocusable(false);
        AddButtonAttr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddButtonAttr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AddButtonAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonAttrActionPerformed(evt);
            }
        });
        ToolBarAttr.add(AddButtonAttr);

        DelButtonAttr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/del.png"))); // NOI18N
        DelButtonAttr.setToolTipText("");
        DelButtonAttr.setFocusable(false);
        DelButtonAttr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DelButtonAttr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        DelButtonAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelButtonAttrActionPerformed(evt);
            }
        });
        ToolBarAttr.add(DelButtonAttr);

        EditButtonAttr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        EditButtonAttr.setFocusable(false);
        EditButtonAttr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditButtonAttr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditButtonAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonAttrActionPerformed(evt);
            }
        });
        ToolBarAttr.add(EditButtonAttr);

        javax.swing.GroupLayout PanelAttrLayout = new javax.swing.GroupLayout(PanelAttr);
        PanelAttr.setLayout(PanelAttrLayout);
        PanelAttrLayout.setHorizontalGroup(
            PanelAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAttrLayout.createSequentialGroup()
                .addGroup(PanelAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAttrLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ToolBarAttr, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAttrLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelAttrLayout.setVerticalGroup(
            PanelAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAttrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToolBarAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(MainWin.TT("Own_Attributes"), PanelAttr);

        jScrollPane2.setViewportView(InheritAttrTable);

        ToolBarInheAttr.setRollover(true);

        javax.swing.GroupLayout PanelInheritAttrLayout = new javax.swing.GroupLayout(PanelInheritAttr);
        PanelInheritAttr.setLayout(PanelInheritAttrLayout);
        PanelInheritAttrLayout.setHorizontalGroup(
            PanelInheritAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInheritAttrLayout.createSequentialGroup()
                .addGroup(PanelInheritAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInheritAttrLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ToolBarInheAttr, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInheritAttrLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelInheritAttrLayout.setVerticalGroup(
            PanelInheritAttrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInheritAttrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToolBarInheAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(MainWin.TT("Inherited_Attributes"), PanelInheritAttr);

        ButtonAcept.setFont(MainWin.getFontDialog());
        ButtonAcept.setText(MainWin.TT("Ok"));
        ButtonAcept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAceptActionPerformed(evt);
            }
        });

        ButtonCancel.setFont(MainWin.getFontDialog());
        ButtonCancel.setText(MainWin.TT("Cancel"));
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        ButtonCreateObject.setFont(MainWin.getFontDialog());
        ButtonCreateObject.setText(MainWin.TT("Create_Object"));
        ButtonCreateObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateObjectActionPerformed(evt);
            }
        });

        ButtonDestroyObject.setFont(MainWin.getFontDialog());
        ButtonDestroyObject.setText(MainWin.TT("Destroy_Object"));
        ButtonDestroyObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDestroyObjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LabelOperation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(TypeNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TypeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(TypeDescripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TypeDescripTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(ButtonCreateObject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonDestroyObject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonAcept)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonCancel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelOperation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TypeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TypeNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TypeDescripTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TypeDescripLabel))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonAcept)
                    .addComponent(ButtonCancel)
                    .addComponent(ButtonCreateObject)
                    .addComponent(ButtonDestroyObject))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonCancelActionPerformed
    {//GEN-HEADEREND:event_ButtonCancelActionPerformed
Cancel=true;
//try {
//if (MainWin.getSession().isInTransaction())
//   MainWin.getSession().AnularTrans();
//} catch (PDException ex)
//    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
//    }
this.dispose();
    }//GEN-LAST:event_ButtonCancelActionPerformed

    private void ButtonAceptActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonAceptActionPerformed
    {//GEN-HEADEREND:event_ButtonAceptActionPerformed
try {
Attribute Attr=ObjDef.getAttr(PDObjDefs.fNAME);
Attr.setValue(TypeNameTextField.getText());
Attr=ObjDef.getAttr(PDObjDefs.fDESCRIPTION);
Attr.setValue(TypeDescripTextField.getText());
Attr=ObjDef.getAttr(PDObjDefs.fACL);
Attr.setValue(ACLComboBox.getSelectedItem());
Attr=ObjDef.getAttr(PDObjDefs.fPARENT);
Attr.setValue(ParentNameTextField.getText());
Attr=ObjDef.getAttr(PDObjDefs.fCLASSTYPE);
Attr.setValue((String)ClassTypeComboBox.getSelectedItem());
Attr=ObjDef.getAttr(PDObjDefs.fREPOSIT);
Attr.setValue((String)RepositComboBox.getSelectedItem());
Attr=ObjDef.getAttr(PDObjDefs.fACTIVE);
Boolean Act;
if (ActiveCheckBox.isSelected())
    Act=    true;
else
    Act=    false;
Attr.setValue(Act);
Attr=ObjDef.getAttr(PDObjDefs.fTRACEADD);
if (TraceAddCheckBox.isSelected())
    Act=    true;
else
    Act=    false;
Attr.setValue(Act);
Attr=ObjDef.getAttr(PDObjDefs.fTRACEDEL);
if (TraceDelCheckBox.isSelected())
    Act=    true;
else
    Act=    false;
Attr.setValue(Act);
Attr=ObjDef.getAttr(PDObjDefs.fTRACEMOD); 
if (TraceModCheckBox.isSelected())
    Act=    true;
else
    Act=    false;
Attr.setValue(Act);
Attr=ObjDef.getAttr(PDObjDefs.fTRACEVIEW); 
if (TraceViewCheckBox.isSelected())
    Act=    true;
else
    Act=    false;
Attr.setValue(Act);
//if (MainWin.getSession().isInTransaction())
//    MainWin.getSession().CerrarTrans();
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
Cancel=false;
this.dispose();
    }//GEN-LAST:event_ButtonAceptActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
Cancel=true;
//try {
//if (MainWin.getSession().isInTransaction())
//        MainWin.getSession().AnularTrans();
//} catch (PDException ex)
//    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
//    }
    }//GEN-LAST:event_formWindowClosing

    private void AddButtonAttrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddButtonAttrActionPerformed
    {//GEN-HEADEREND:event_AddButtonAttrActionPerformed
try {
//PDObjDefs newObjDef=new PDObjDefs((MainWin.getSession()));
//newObjDef.setName((String)ObjDef.getAttr(PDObjDefs.fNAME).getValue());
Record r=PDObjDefs.getRecordAttrsStruct();
MantAttr MP = new MantAttr(Fparent, true, true);
MP.setRecord(r);
MP.AddMode();
MP.setLocationRelativeTo(null);
MP.setVisible(true);
if (MP.isCancel())
    return;
getListRes().add(MP.getRecord());
ButtonCreateObject.setEnabled(false);
RefreshOwnAttr(TypeNameTextField.getText());
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}//GEN-LAST:event_AddButtonAttrActionPerformed

    private void DelButtonAttrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DelButtonAttrActionPerformed
    {//GEN-HEADEREND:event_DelButtonAttrActionPerformed
if (AttrTable.getSelectedRow()==-1)
    return;
try {
//PDObjDefs newObjDef=new PDObjDefs((MainWin.getSession()));
//newObjDef.setName((String)ObjDef.getAttr(PDObjDefs.fNAME).getValue());
MantAttr MP = new MantAttr(Fparent, true, true);
MP.setRecord(AttrMembers.getElement(AttrTable.convertRowIndexToModel(AttrTable.getSelectedRow())));
MP.DelMode();
MP.setLocationRelativeTo(null);
MP.setVisible(true);
if (MP.isCancel())
    return;
String AttrName=(String) MP.getRecord().getAttr(PDObjDefs.fATTRNAME).getValue();
for (int i = 0; i < getListRes().size(); i++)
    {
    String AttrNameI=(String)((Record)getListRes().elementAt(i)).getAttr(PDObjDefs.fATTRNAME).getValue();
    if (AttrNameI.equals(AttrName))
       {
                    getListRes().remove(i);   
       break;
       }   
    }
ButtonCreateObject.setEnabled(false);
RefreshOwnAttr(TypeNameTextField.getText());
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}//GEN-LAST:event_DelButtonAttrActionPerformed

    private void EditButtonAttrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_EditButtonAttrActionPerformed
    {//GEN-HEADEREND:event_EditButtonAttrActionPerformed
if (AttrTable.getSelectedRow()==-1)
    return;
try {
MantAttr MP = new MantAttr(Fparent, true, true);
MP.setRecord(AttrMembers.getElement(AttrTable.convertRowIndexToModel(AttrTable.getSelectedRow())));
MP.EditMode();
MP.setLocationRelativeTo(null);
MP.setVisible(true);
if (MP.isCancel())
    return;
String AttrName=(String) MP.getRecord().getAttr(PDObjDefs.fATTRNAME).getValue();
for (int i = 0; i < getListRes().size(); i++)
    {
    String AttrNameI=(String)((Record)getListRes().elementAt(i)).getAttr(PDObjDefs.fATTRNAME).getValue();
    if (AttrNameI.equals(AttrName))
       {
                    getListRes().set(i, MP.getRecord());
       break;
       }   
    }
ButtonCreateObject.setEnabled(false);
RefreshOwnAttr(TypeNameTextField.getText());
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_EditButtonAttrActionPerformed

    private void ButtonCreateObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateObjectActionPerformed
try {
PDObjDefs newObjDef=new PDObjDefs((MainWin.getSession()));
newObjDef.Load((String)ObjDef.getAttr(PDObjDefs.fNAME).getValue()); // exist the object?
newObjDef.CreateObjectTables(newObjDef.getName(),
           ((String)ClassTypeComboBox.getSelectedItem()).equalsIgnoreCase(PDObjDefs.CT_FOLDER));
//if (MainWin.getSession().isInTransaction())
//        MainWin.getSession().CerrarTrans();
ObjDef.getAttr(PDObjDefs.fCREATED).setValue(true);
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
this.dispose();
    }//GEN-LAST:event_ButtonCreateObjectActionPerformed

    private void ButtonDestroyObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDestroyObjectActionPerformed
try {
PDObjDefs newObjDef=new PDObjDefs((MainWin.getSession()));
newObjDef.Load((String)ObjDef.getAttr(PDObjDefs.fNAME).getValue()); // exist the object?
newObjDef.DeleteObjectTables(newObjDef.getName());
//if (MainWin.getSession().isInTransaction())
//        MainWin.getSession().CerrarTrans();
ObjDef.getAttr(PDObjDefs.fCREATED).setValue(false);
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
this.dispose();
    }//GEN-LAST:event_ButtonDestroyObjectActionPerformed

    private void TypeNameTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TypeNameTextFieldKeyReleased
    {//GEN-HEADEREND:event_TypeNameTextFieldKeyReleased
try {
RefreshOwnAttr(TypeNameTextField.getText());
} catch (PDException ex)
    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
    }//GEN-LAST:event_TypeNameTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ACLComboBox;
    private javax.swing.JLabel ACLDescripLabel;
    private javax.swing.JCheckBox ActiveCheckBox;
    private javax.swing.JLabel ActiveLabel;
    private javax.swing.JButton AddButtonAttr;
    private javax.swing.JTable AttrTable;
    private javax.swing.JButton ButtonAcept;
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonCreateObject;
    private javax.swing.JButton ButtonDestroyObject;
    private javax.swing.JLabel ClasTypeDescripLabel;
    private javax.swing.JComboBox ClassTypeComboBox;
    private javax.swing.JButton DelButtonAttr;
    private javax.swing.JButton EditButtonAttr;
    private javax.swing.JTable InheritAttrTable;
    private javax.swing.JLabel LabelOperation;
    private javax.swing.JPanel PanelAttr;
    private javax.swing.JPanel PanelInheritAttr;
    private javax.swing.JPanel PanelType;
    private javax.swing.JLabel ParentNameLabel;
    private javax.swing.JTextField ParentNameTextField;
    private javax.swing.JComboBox RepositComboBox;
    private javax.swing.JLabel RepositDescripLabel;
    private javax.swing.JToolBar ToolBarAttr;
    private javax.swing.JToolBar ToolBarInheAttr;
    private javax.swing.JCheckBox TraceAddCheckBox;
    private javax.swing.JLabel TraceAddLabel;
    private javax.swing.JCheckBox TraceDelCheckBox;
    private javax.swing.JLabel TraceDelLabel;
    private javax.swing.JCheckBox TraceModCheckBox;
    private javax.swing.JLabel TraceModLabel;
    private javax.swing.JCheckBox TraceViewCheckBox;
    private javax.swing.JLabel TraceViewLabel;
    private javax.swing.JLabel TypeDescripLabel;
    private javax.swing.JTextField TypeDescripTextField;
    private javax.swing.JLabel TypeNameLabel;
    private javax.swing.JTextField TypeNameTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

/**
*
*/
public void AddMode()
{
LabelOperation.setText(MainWin.TT("Add_Object_definition"));
ParentNameTextField.setEnabled(false);
//AddButtonAttr.setEnabled(false);
//DelButtonAttr.setEnabled(false);
//EditButtonAttr.setEnabled(false);
//PanelAttr.setEnabled(false);
ButtonCreateObject.setEnabled(false);
PanelInheritAttr.setEnabled(false);
}
//----------------------------------------------------------------
/**
*
*/
public void DelMode()
{
LabelOperation.setText(MainWin.TT("Delete_Object_definition"));
TypeNameTextField.setEditable(false);
TypeDescripTextField.setEditable(false);
ClassTypeComboBox.setEnabled(false);
ParentNameTextField.setEditable(false);
AddButtonAttr.setEnabled(false);
DelButtonAttr.setEnabled(false);
EditButtonAttr.setEnabled(false);
ButtonCreateObject.setEnabled(false);
}
//----------------------------------------------------------------
/**
*
*/
public void EditMode()
{
LabelOperation.setText(MainWin.TT("Update_Object_definition"));
TypeNameTextField.setEditable(false);
ClassTypeComboBox.setEnabled(false);
ParentNameTextField.setEditable(false);
//try {
//MainWin.getSession().IniciarTrans();
//} catch (PDException ex)
//    {MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
//    }
}
//----------------------------------------------------------------
/**
*
*/
public void CopyMode()
{
LabelOperation.setText(MainWin.TT("Copy_Object_definition"));
TypeNameTextField.setText(TypeNameTextField.getText()+"1");
PanelAttr.setEnabled(false);
PanelInheritAttr.setEnabled(false);
}
//----------------------------------------------------------------
/**
* @return the ACL
*/
public Record getRecord()
{
return ObjDef;
}
//----------------------------------------------------------------
/**
 * @param pObjDef
*/
public void setRecord(Record pObjDef)
{
try {
ObjDef = pObjDef;
Attribute Attr = ObjDef.getAttr(PDObjDefs.fNAME); //---------------------------
TypeNameLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    TypeNameTextField.setText((String) Attr.getValue());
//    if ( !(((String) Attr.getValue()).equalsIgnoreCase(PDDocs.getTableName())
//     || ((String) Attr.getValue()).equalsIgnoreCase(PDFolders.getTableName())) )
//        {
//        RefreshInheAttr((String)Attr.getValue());
//        RefreshOwnAttr((String)Attr.getValue());
//        }
    }
RefreshOwnAttr((String)Attr.getValue());
TypeNameTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr = ObjDef.getAttr(PDObjDefs.fDESCRIPTION); //-----------------------------
TypeDescripLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    TypeDescripTextField.setText((String) Attr.getValue());
TypeDescripTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fACL);  //-----------------------------
ACLDescripLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue()!=null)
    ACLComboBox.setSelectedItem((String)Attr.getValue());
ACLComboBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fPARENT); //-----------------------------
ParentNameLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    ParentNameTextField.setText((String) Attr.getValue());
ParentNameTextField.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
RefreshInheAttr((String)Attr.getValue());
Attr=ObjDef.getAttr(PDObjDefs.fCLASSTYPE); //-----------------------------
ClasTypeDescripLabel.setText(MainWin.DrvTT(Attr.getUserName()));
boolean ShowRep=true;
if (Attr.getValue() != null)
    {
    ClassTypeComboBox.setSelectedItem((String)Attr.getValue());
    ShowRep=((String)Attr.getValue()).equals(PDObjDefs.CT_DOC);
    }
ClassTypeComboBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fREPOSIT); //-----------------------------
if (ShowRep)
    {
    RepositDescripLabel.setText(MainWin.DrvTT(Attr.getUserName()));
    if (Attr.getValue() != null)
        RepositComboBox.setSelectedItem((String)Attr.getValue());
    RepositComboBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
    }
else
    {
    RepositDescripLabel.setVisible(ShowRep);
    RepositComboBox.setVisible(ShowRep);
    }
Attr=ObjDef.getAttr(PDObjDefs.fACTIVE); //-----------------------------
ActiveLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    ActiveCheckBox.setSelected((Boolean)Attr.getValue());
    }
ActiveCheckBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fTRACEADD); //-----------------------------
TraceAddLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    TraceAddCheckBox.setSelected((Boolean)Attr.getValue());
    }
TraceAddCheckBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fTRACEDEL); //-----------------------------
TraceDelLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    TraceDelCheckBox.setSelected((Boolean)Attr.getValue());
    }
TraceDelCheckBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fTRACEMOD); //-----------------------------
TraceModLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    TraceModCheckBox.setSelected((Boolean)Attr.getValue());
    }
TraceModCheckBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fTRACEVIEW); //-----------------------------
TraceViewLabel.setText(MainWin.DrvTT(Attr.getUserName()));
if (Attr.getValue() != null)
    {
    TraceViewCheckBox.setSelected((Boolean)Attr.getValue());
    }
TraceViewCheckBox.setToolTipText(MainWin.DrvTT(Attr.getDescription()));
Attr=ObjDef.getAttr(PDObjDefs.fCREATED); //-----------------------------
if (Attr.getValue() != null)
    {
    ButtonCreateObject.setEnabled(!(Boolean)Attr.getValue());
    AddButtonAttr.setEnabled(!(Boolean)Attr.getValue());
    DelButtonAttr.setEnabled(!(Boolean)Attr.getValue());
    EditButtonAttr.setEnabled(!(Boolean)Attr.getValue());
    ButtonDestroyObject.setEnabled((Boolean)Attr.getValue());
    }
else
    {
    ButtonCreateObject.setEnabled(true);
    ButtonDestroyObject.setEnabled(false);
    }
} catch (PDException ex)
    {
    MainWin.Message(MainWin.DrvTT(ex.getLocalizedMessage()));
    }
}
//----------------------------------------------------------------
/**
 * 
 * @param TypeName
 * @throws PDException
 */
private void RefreshInheAttr(String TypeName) throws PDException
{
InheritAttrMembers = new PDTableModel();
InheritAttrMembers.setDrv(MainWin.getSession());
InheritAttrMembers.setListFields(EditObjDef.getRecordAttrsStruct());
InheritAttrMembers.setCursor(EditObjDef.getListParentAttr2(TypeName));
InheritAttrTable.setModel(InheritAttrMembers);
//InheritAttrTable.getColumnModel().getColumn(0).setMaxWidth(0);
//InheritAttrTable.getColumnModel().removeColumn(AttrTable.getColumnModel().getColumn(0));
}
//----------------------------------------------------------------
/**
 * 
 * @param TypeName
 * @throws PDException
 */
private void RefreshOwnAttr(String TypeName) throws PDException
{
    
AttrMembers = new PDTableModel();
//AttrMembers.setDrv(MainWin.getSession());
AttrMembers.setListFields(EditObjDef.getRecordAttrsStruct());
if (    getListRes()==null)
    {
    ListRes=new Vector();    
    if (TypeName!=null && TypeName.length()!=0)
        {
        Cursor CursorId=EditObjDef.getListAttr(TypeName);
        Record Res=MainWin.getSession().NextRec(CursorId);
        while (Res!=null)
            {
                    getListRes().add(Res);
            Res=MainWin.getSession().NextRec(CursorId);
            }
        MainWin.getSession().CloseCursor(CursorId);
        }
    }
else
    {
    for (int i = 0; i < getListRes().size(); i++)
        {
        ((Record) getListRes().elementAt(i)).getAttr(PDObjDefs.fTYPNAME).setValue(TypeName);   
        }
    }
AttrMembers.setVector(getListRes());
AttrTable.setModel(AttrMembers);
AttrTable.repaint();
//AttrTable.getColumnModel().getColumn(0).setMaxWidth(0);
//AttrTable.getColumnModel().removeColumn(AttrTable.getColumnModel().getColumn(0));
}
//----------------------------------------------------------------
/**
* @return the Cancel
*/
public boolean isCancel()
{
return Cancel;
}
//----------------------------------------------------------------
private DefaultComboBoxModel getComboModel(String Type)
{
return(ListObjects.getComboModel(Type));
}
//----------------------------------------------------------------

    /**
     * @return the ListRes
     */
    public Vector getListRes()
    {
        return ListRes;
    }
}
